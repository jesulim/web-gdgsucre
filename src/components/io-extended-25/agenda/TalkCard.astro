---
import type { ImageMetadata } from "astro"
import MarcoSvgExpert from "../speakers/marcos/marco-expert.svg"
import MarcoSvg from "../speakers/marcos/marco.svg"

export interface Tag {
  label: string
  class?: string
}

export interface Props {
  start: string
  end: string
  title: string
  speaker: string
  tags?: Tag[]
  photoSrc: string | ImageMetadata
  photoAlt?: string
  imageSide?: "right" | "left"
  isExpert?: boolean
}

const {
  start,
  end,
  title,
  speaker,
  tags = [],
  photoSrc,
  photoAlt = speaker || "Ponente",
  imageSide = "right",
  isExpert = false,
}: Props = Astro.props

const resolvedPhotoSrc = typeof photoSrc === "string" ? photoSrc : photoSrc.src

const containerDir = imageSide === "left" ? "flex-col md:flex-row" : "flex-col md:flex-row-reverse"

const infoPads = imageSide === "right" ? "md:pl-[72px] md:pr-[24px]" : "md:pl-[24px] md:pr-[72px]"

const marcoSrc = isExpert ? MarcoSvgExpert : MarcoSvg
---

<div
  class={`flex ${containerDir} items-center md:w-[638px] h-fit justify-between gap-[0px] p-[32px] md:p-0 rounded-[64px] md:rounded-[100px] bg-[#1E1E1E] text-white shadow-2xl`}
>
  <!-- Avatar -->
  <div class="shrink-0 relative w-[200px] h-[200px]">
    <!-- Foto -->
    <img
      src={resolvedPhotoSrc}
      alt={photoAlt}
      class="w-full h-full rounded-full object-cover"
    />

    <!-- Marco -->
    <img
      src={marcoSrc.src}
      alt=""
      aria-hidden="true"
      class={isExpert
        ? "absolute top-[-4px] left-1/2 w-[220px] h-[220px] -translate-x-1/2 pointer-events-none"
        : "absolute top-1/2 left-1/2 w-[220px] h-[220px] -translate-x-1/2 -translate-y-1/2 pointer-events-none"}
    />
  </div>

  <!-- Info -->
  <div class={`flex flex-col ${infoPads} py-[24px]`}>
    <p class="text-[#3A84FF] font-bold text-[24px]">
      {start} â€“ {end}
    </p>

    <h3 class="mt-1 text-[20px] font-bold leading-tight">
      {title}
    </h3>

    <div class="flex justify-between font-medium">
      <p class="mt-2 text-white">
        {speaker}
      </p>

      {
        tags.length > 0 && (
          <div class="mt-2 flex gap-x-1 font-bold items-center">
            {tags.map((t, i) => (
              <>
                <span class={t.class ?? "text-neutral-200"}>{t.label}</span>
                {i < tags.length - 1 && <span class="text-white">&</span>}
              </>
            ))}
          </div>
        )
      }
    </div>
  </div>
</div>
